{"ast":null,"code":"'use strict';\n\nvar d3 = require('@plotly/d3');\nvar Colorscale = require('../../components/colorscale');\nvar endPlus = require('./end_plus');\nmodule.exports = function makeColorMap(trace) {\n  var contours = trace.contours;\n  var start = contours.start;\n  var end = endPlus(contours);\n  var cs = contours.size || 1;\n  var nc = Math.floor((end - start) / cs) + 1;\n  var extra = contours.coloring === 'lines' ? 0 : 1;\n  var cOpts = Colorscale.extractOpts(trace);\n  if (!isFinite(cs)) {\n    cs = 1;\n    nc = 1;\n  }\n  var scl = cOpts.reversescale ? Colorscale.flipScale(cOpts.colorscale) : cOpts.colorscale;\n  var len = scl.length;\n  var domain = new Array(len);\n  var range = new Array(len);\n  var si, i;\n  if (contours.coloring === 'heatmap') {\n    var zmin0 = cOpts.min;\n    var zmax0 = cOpts.max;\n    for (i = 0; i < len; i++) {\n      si = scl[i];\n      domain[i] = si[0] * (zmax0 - zmin0) + zmin0;\n      range[i] = si[1];\n    }\n\n    // do the contours extend beyond the colorscale?\n    // if so, extend the colorscale with constants\n    var zRange = d3.extent([zmin0, zmax0, contours.start, contours.start + cs * (nc - 1)]);\n    var zmin = zRange[zmin0 < zmax0 ? 0 : 1];\n    var zmax = zRange[zmin0 < zmax0 ? 1 : 0];\n    if (zmin !== zmin0) {\n      domain.splice(0, 0, zmin);\n      range.splice(0, 0, range[0]);\n    }\n    if (zmax !== zmax0) {\n      domain.push(zmax);\n      range.push(range[range.length - 1]);\n    }\n  } else {\n    for (i = 0; i < len; i++) {\n      si = scl[i];\n      domain[i] = (si[0] * (nc + extra - 1) - extra / 2) * cs + start;\n      range[i] = si[1];\n    }\n  }\n  return Colorscale.makeColorScaleFunc({\n    domain: domain,\n    range: range\n  }, {\n    noNumericCheck: true\n  });\n};","map":{"version":3,"names":["d3","require","Colorscale","endPlus","module","exports","makeColorMap","trace","contours","start","end","cs","size","nc","Math","floor","extra","coloring","cOpts","extractOpts","isFinite","scl","reversescale","flipScale","colorscale","len","length","domain","Array","range","si","i","zmin0","min","zmax0","max","zRange","extent","zmin","zmax","splice","push","makeColorScaleFunc","noNumericCheck"],"sources":["/Users/lordvoldemort/django_react/second_attempt/frontend/bull_bear/node_modules/plotly.js/src/traces/contour/make_color_map.js"],"sourcesContent":["'use strict';\n\nvar d3 = require('@plotly/d3');\n\nvar Colorscale = require('../../components/colorscale');\nvar endPlus = require('./end_plus');\n\nmodule.exports = function makeColorMap(trace) {\n    var contours = trace.contours;\n    var start = contours.start;\n    var end = endPlus(contours);\n    var cs = contours.size || 1;\n    var nc = Math.floor((end - start) / cs) + 1;\n    var extra = contours.coloring === 'lines' ? 0 : 1;\n    var cOpts = Colorscale.extractOpts(trace);\n\n    if(!isFinite(cs)) {\n        cs = 1;\n        nc = 1;\n    }\n\n    var scl = cOpts.reversescale ?\n        Colorscale.flipScale(cOpts.colorscale) :\n        cOpts.colorscale;\n\n    var len = scl.length;\n    var domain = new Array(len);\n    var range = new Array(len);\n\n    var si, i;\n\n    if(contours.coloring === 'heatmap') {\n        var zmin0 = cOpts.min;\n        var zmax0 = cOpts.max;\n\n        for(i = 0; i < len; i++) {\n            si = scl[i];\n            domain[i] = si[0] * (zmax0 - zmin0) + zmin0;\n            range[i] = si[1];\n        }\n\n        // do the contours extend beyond the colorscale?\n        // if so, extend the colorscale with constants\n        var zRange = d3.extent([\n            zmin0,\n            zmax0,\n            contours.start,\n            contours.start + cs * (nc - 1)\n        ]);\n        var zmin = zRange[zmin0 < zmax0 ? 0 : 1];\n        var zmax = zRange[zmin0 < zmax0 ? 1 : 0];\n\n        if(zmin !== zmin0) {\n            domain.splice(0, 0, zmin);\n            range.splice(0, 0, range[0]);\n        }\n\n        if(zmax !== zmax0) {\n            domain.push(zmax);\n            range.push(range[range.length - 1]);\n        }\n    } else {\n        for(i = 0; i < len; i++) {\n            si = scl[i];\n            domain[i] = (si[0] * (nc + extra - 1) - (extra / 2)) * cs + start;\n            range[i] = si[1];\n        }\n    }\n\n    return Colorscale.makeColorScaleFunc(\n        {domain: domain, range: range},\n        {noNumericCheck: true}\n    );\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,EAAE,GAAGC,OAAO,CAAC,YAAY,CAAC;AAE9B,IAAIC,UAAU,GAAGD,OAAO,CAAC,6BAA6B,CAAC;AACvD,IAAIE,OAAO,GAAGF,OAAO,CAAC,YAAY,CAAC;AAEnCG,MAAM,CAACC,OAAO,GAAG,SAASC,YAAYA,CAACC,KAAK,EAAE;EAC1C,IAAIC,QAAQ,GAAGD,KAAK,CAACC,QAAQ;EAC7B,IAAIC,KAAK,GAAGD,QAAQ,CAACC,KAAK;EAC1B,IAAIC,GAAG,GAAGP,OAAO,CAACK,QAAQ,CAAC;EAC3B,IAAIG,EAAE,GAAGH,QAAQ,CAACI,IAAI,IAAI,CAAC;EAC3B,IAAIC,EAAE,GAAGC,IAAI,CAACC,KAAK,CAAC,CAACL,GAAG,GAAGD,KAAK,IAAIE,EAAE,CAAC,GAAG,CAAC;EAC3C,IAAIK,KAAK,GAAGR,QAAQ,CAACS,QAAQ,KAAK,OAAO,GAAG,CAAC,GAAG,CAAC;EACjD,IAAIC,KAAK,GAAGhB,UAAU,CAACiB,WAAW,CAACZ,KAAK,CAAC;EAEzC,IAAG,CAACa,QAAQ,CAACT,EAAE,CAAC,EAAE;IACdA,EAAE,GAAG,CAAC;IACNE,EAAE,GAAG,CAAC;EACV;EAEA,IAAIQ,GAAG,GAAGH,KAAK,CAACI,YAAY,GACxBpB,UAAU,CAACqB,SAAS,CAACL,KAAK,CAACM,UAAU,CAAC,GACtCN,KAAK,CAACM,UAAU;EAEpB,IAAIC,GAAG,GAAGJ,GAAG,CAACK,MAAM;EACpB,IAAIC,MAAM,GAAG,IAAIC,KAAK,CAACH,GAAG,CAAC;EAC3B,IAAII,KAAK,GAAG,IAAID,KAAK,CAACH,GAAG,CAAC;EAE1B,IAAIK,EAAE,EAAEC,CAAC;EAET,IAAGvB,QAAQ,CAACS,QAAQ,KAAK,SAAS,EAAE;IAChC,IAAIe,KAAK,GAAGd,KAAK,CAACe,GAAG;IACrB,IAAIC,KAAK,GAAGhB,KAAK,CAACiB,GAAG;IAErB,KAAIJ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,GAAG,EAAEM,CAAC,EAAE,EAAE;MACrBD,EAAE,GAAGT,GAAG,CAACU,CAAC,CAAC;MACXJ,MAAM,CAACI,CAAC,CAAC,GAAGD,EAAE,CAAC,CAAC,CAAC,IAAII,KAAK,GAAGF,KAAK,CAAC,GAAGA,KAAK;MAC3CH,KAAK,CAACE,CAAC,CAAC,GAAGD,EAAE,CAAC,CAAC,CAAC;IACpB;;IAEA;IACA;IACA,IAAIM,MAAM,GAAGpC,EAAE,CAACqC,MAAM,CAAC,CACnBL,KAAK,EACLE,KAAK,EACL1B,QAAQ,CAACC,KAAK,EACdD,QAAQ,CAACC,KAAK,GAAGE,EAAE,IAAIE,EAAE,GAAG,CAAC,CAAC,CACjC,CAAC;IACF,IAAIyB,IAAI,GAAGF,MAAM,CAACJ,KAAK,GAAGE,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC;IACxC,IAAIK,IAAI,GAAGH,MAAM,CAACJ,KAAK,GAAGE,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC;IAExC,IAAGI,IAAI,KAAKN,KAAK,EAAE;MACfL,MAAM,CAACa,MAAM,CAAC,CAAC,EAAE,CAAC,EAAEF,IAAI,CAAC;MACzBT,KAAK,CAACW,MAAM,CAAC,CAAC,EAAE,CAAC,EAAEX,KAAK,CAAC,CAAC,CAAC,CAAC;IAChC;IAEA,IAAGU,IAAI,KAAKL,KAAK,EAAE;MACfP,MAAM,CAACc,IAAI,CAACF,IAAI,CAAC;MACjBV,KAAK,CAACY,IAAI,CAACZ,KAAK,CAACA,KAAK,CAACH,MAAM,GAAG,CAAC,CAAC,CAAC;IACvC;EACJ,CAAC,MAAM;IACH,KAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,GAAG,EAAEM,CAAC,EAAE,EAAE;MACrBD,EAAE,GAAGT,GAAG,CAACU,CAAC,CAAC;MACXJ,MAAM,CAACI,CAAC,CAAC,GAAG,CAACD,EAAE,CAAC,CAAC,CAAC,IAAIjB,EAAE,GAAGG,KAAK,GAAG,CAAC,CAAC,GAAIA,KAAK,GAAG,CAAE,IAAIL,EAAE,GAAGF,KAAK;MACjEoB,KAAK,CAACE,CAAC,CAAC,GAAGD,EAAE,CAAC,CAAC,CAAC;IACpB;EACJ;EAEA,OAAO5B,UAAU,CAACwC,kBAAkB,CAChC;IAACf,MAAM,EAAEA,MAAM;IAAEE,KAAK,EAAEA;EAAK,CAAC,EAC9B;IAACc,cAAc,EAAE;EAAI,CAAC,CACzB;AACL,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}