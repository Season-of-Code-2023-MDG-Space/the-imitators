{"ast":null,"code":"'use strict';\n\nvar fontAttrs = require('../../../plots/font_attributes');\nvar dash = require('../../drawing/attributes').dash;\nvar extendFlat = require('../../../lib/extend').extendFlat;\nmodule.exports = {\n  newshape: {\n    line: {\n      color: {\n        valType: 'color',\n        editType: 'none',\n        description: ['Sets the line color.', 'By default uses either dark grey or white', 'to increase contrast with background color.'].join(' ')\n      },\n      width: {\n        valType: 'number',\n        min: 0,\n        dflt: 4,\n        editType: 'none',\n        description: 'Sets the line width (in px).'\n      },\n      dash: extendFlat({}, dash, {\n        dflt: 'solid',\n        editType: 'none'\n      }),\n      editType: 'none'\n    },\n    fillcolor: {\n      valType: 'color',\n      dflt: 'rgba(0,0,0,0)',\n      editType: 'none',\n      description: ['Sets the color filling new shapes\\' interior.', 'Please note that if using a fillcolor with alpha greater than half,', 'drag inside the active shape starts moving the shape underneath,', 'otherwise a new shape could be started over.'].join(' ')\n    },\n    fillrule: {\n      valType: 'enumerated',\n      values: ['evenodd', 'nonzero'],\n      dflt: 'evenodd',\n      editType: 'none',\n      description: ['Determines the path\\'s interior.', 'For more info please visit https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/fill-rule'].join(' ')\n    },\n    opacity: {\n      valType: 'number',\n      min: 0,\n      max: 1,\n      dflt: 1,\n      editType: 'none',\n      description: 'Sets the opacity of new shapes.'\n    },\n    layer: {\n      valType: 'enumerated',\n      values: ['below', 'above'],\n      dflt: 'above',\n      editType: 'none',\n      description: 'Specifies whether new shapes are drawn below or above traces.'\n    },\n    drawdirection: {\n      valType: 'enumerated',\n      values: ['ortho', 'horizontal', 'vertical', 'diagonal'],\n      dflt: 'diagonal',\n      editType: 'none',\n      description: ['When `dragmode` is set to *drawrect*, *drawline* or *drawcircle*', 'this limits the drag to be horizontal, vertical or diagonal.', 'Using *diagonal* there is no limit e.g. in drawing lines in any direction.', '*ortho* limits the draw to be either horizontal or vertical.', '*horizontal* allows horizontal extend.', '*vertical* allows vertical extend.'].join(' ')\n    },\n    label: {\n      text: {\n        valType: 'string',\n        dflt: '',\n        editType: 'none',\n        description: 'Sets the text to display with the new shape.'\n      },\n      font: fontAttrs({\n        editType: 'none',\n        description: 'Sets the new shape label text font.'\n      }),\n      textposition: {\n        valType: 'enumerated',\n        values: ['top left', 'top center', 'top right', 'middle left', 'middle center', 'middle right', 'bottom left', 'bottom center', 'bottom right', 'start', 'middle', 'end'],\n        editType: 'none',\n        description: ['Sets the position of the label text relative to the new shape.', 'Supported values for rectangles, circles and paths are', '*top left*, *top center*, *top right*, *middle left*,', '*middle center*, *middle right*, *bottom left*, *bottom center*,', 'and *bottom right*.', 'Supported values for lines are *start*, *middle*, and *end*.', 'Default: *middle center* for rectangles, circles, and paths; *middle* for lines.'].join(' ')\n      },\n      textangle: {\n        valType: 'angle',\n        dflt: 'auto',\n        editType: 'none',\n        description: ['Sets the angle at which the label text is drawn', 'with respect to the horizontal. For lines, angle *auto*', 'is the same angle as the line. For all other shapes,', 'angle *auto* is horizontal.'].join(' ')\n      },\n      xanchor: {\n        valType: 'enumerated',\n        values: ['auto', 'left', 'center', 'right'],\n        dflt: 'auto',\n        editType: 'none',\n        description: ['Sets the label\\'s horizontal position anchor', 'This anchor binds the specified `textposition` to the *left*, *center*', 'or *right* of the label text.', 'For example, if `textposition` is set to *top right* and', '`xanchor` to *right* then the right-most portion of the', 'label text lines up with the right-most edge of the', 'new shape.'].join(' ')\n      },\n      yanchor: {\n        valType: 'enumerated',\n        values: ['top', 'middle', 'bottom'],\n        editType: 'none',\n        description: ['Sets the label\\'s vertical position anchor', 'This anchor binds the specified `textposition` to the *top*, *middle*', 'or *bottom* of the label text.', 'For example, if `textposition` is set to *top right* and', '`yanchor` to *top* then the top-most portion of the', 'label text lines up with the top-most edge of the', 'new shape.'].join(' ')\n      },\n      padding: {\n        valType: 'number',\n        dflt: 3,\n        min: 0,\n        editType: 'none',\n        description: 'Sets padding (in px) between edge of label and edge of new shape.'\n      },\n      editType: 'none'\n    },\n    editType: 'none'\n  },\n  activeshape: {\n    fillcolor: {\n      valType: 'color',\n      dflt: 'rgb(255,0,255)',\n      editType: 'none',\n      description: 'Sets the color filling the active shape\\' interior.'\n    },\n    opacity: {\n      valType: 'number',\n      min: 0,\n      max: 1,\n      dflt: 0.5,\n      editType: 'none',\n      description: 'Sets the opacity of the active shape.'\n    },\n    editType: 'none'\n  }\n};","map":{"version":3,"names":["fontAttrs","require","dash","extendFlat","module","exports","newshape","line","color","valType","editType","description","join","width","min","dflt","fillcolor","fillrule","values","opacity","max","layer","drawdirection","label","text","font","textposition","textangle","xanchor","yanchor","padding","activeshape"],"sources":["/Users/lordvoldemort/django_react/second_attempt/frontend/bull_bear/node_modules/plotly.js/src/components/shapes/draw_newshape/attributes.js"],"sourcesContent":["'use strict';\n\nvar fontAttrs = require('../../../plots/font_attributes');\nvar dash = require('../../drawing/attributes').dash;\nvar extendFlat = require('../../../lib/extend').extendFlat;\n\nmodule.exports = {\n    newshape: {\n        line: {\n            color: {\n                valType: 'color',\n                editType: 'none',\n                description: [\n                    'Sets the line color.',\n                    'By default uses either dark grey or white',\n                    'to increase contrast with background color.'\n                ].join(' ')\n            },\n            width: {\n                valType: 'number',\n                min: 0,\n                dflt: 4,\n                editType: 'none',\n                description: 'Sets the line width (in px).'\n            },\n            dash: extendFlat({}, dash, {\n                dflt: 'solid',\n                editType: 'none'\n            }),\n            editType: 'none'\n        },\n        fillcolor: {\n            valType: 'color',\n            dflt: 'rgba(0,0,0,0)',\n            editType: 'none',\n            description: [\n                'Sets the color filling new shapes\\' interior.',\n                'Please note that if using a fillcolor with alpha greater than half,',\n                'drag inside the active shape starts moving the shape underneath,',\n                'otherwise a new shape could be started over.'\n            ].join(' ')\n        },\n        fillrule: {\n            valType: 'enumerated',\n            values: ['evenodd', 'nonzero'],\n            dflt: 'evenodd',\n            editType: 'none',\n            description: [\n                'Determines the path\\'s interior.',\n                'For more info please visit https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/fill-rule'\n            ].join(' ')\n        },\n        opacity: {\n            valType: 'number',\n            min: 0,\n            max: 1,\n            dflt: 1,\n            editType: 'none',\n            description: 'Sets the opacity of new shapes.'\n        },\n        layer: {\n            valType: 'enumerated',\n            values: ['below', 'above'],\n            dflt: 'above',\n            editType: 'none',\n            description: 'Specifies whether new shapes are drawn below or above traces.'\n        },\n        drawdirection: {\n            valType: 'enumerated',\n            values: ['ortho', 'horizontal', 'vertical', 'diagonal'],\n            dflt: 'diagonal',\n            editType: 'none',\n            description: [\n                'When `dragmode` is set to *drawrect*, *drawline* or *drawcircle*',\n                'this limits the drag to be horizontal, vertical or diagonal.',\n                'Using *diagonal* there is no limit e.g. in drawing lines in any direction.',\n                '*ortho* limits the draw to be either horizontal or vertical.',\n                '*horizontal* allows horizontal extend.',\n                '*vertical* allows vertical extend.'\n            ].join(' ')\n        },\n        label: {\n            text: {\n                valType: 'string',\n                dflt: '',\n                editType: 'none',\n                description: 'Sets the text to display with the new shape.'\n            },\n            font: fontAttrs({\n                editType: 'none',\n                description: 'Sets the new shape label text font.'\n            }),\n            textposition: {\n                valType: 'enumerated',\n                values: [\n                    'top left', 'top center', 'top right',\n                    'middle left', 'middle center', 'middle right',\n                    'bottom left', 'bottom center', 'bottom right',\n                    'start', 'middle', 'end',\n                ],\n                editType: 'none',\n                description: [\n                    'Sets the position of the label text relative to the new shape.',\n                    'Supported values for rectangles, circles and paths are',\n                    '*top left*, *top center*, *top right*, *middle left*,',\n                    '*middle center*, *middle right*, *bottom left*, *bottom center*,',\n                    'and *bottom right*.',\n                    'Supported values for lines are *start*, *middle*, and *end*.',\n                    'Default: *middle center* for rectangles, circles, and paths; *middle* for lines.',\n                ].join(' ')\n            },\n            textangle: {\n                valType: 'angle',\n                dflt: 'auto',\n                editType: 'none',\n                description: [\n                    'Sets the angle at which the label text is drawn',\n                    'with respect to the horizontal. For lines, angle *auto*',\n                    'is the same angle as the line. For all other shapes,',\n                    'angle *auto* is horizontal.'\n                ].join(' ')\n            },\n            xanchor: {\n                valType: 'enumerated',\n                values: ['auto', 'left', 'center', 'right'],\n                dflt: 'auto',\n                editType: 'none',\n                description: [\n                    'Sets the label\\'s horizontal position anchor',\n                    'This anchor binds the specified `textposition` to the *left*, *center*',\n                    'or *right* of the label text.',\n                    'For example, if `textposition` is set to *top right* and',\n                    '`xanchor` to *right* then the right-most portion of the',\n                    'label text lines up with the right-most edge of the',\n                    'new shape.',\n                ].join(' '),\n            },\n            yanchor: {\n                valType: 'enumerated',\n                values: ['top', 'middle', 'bottom'],\n                editType: 'none',\n                description: [\n                    'Sets the label\\'s vertical position anchor',\n                    'This anchor binds the specified `textposition` to the *top*, *middle*',\n                    'or *bottom* of the label text.',\n                    'For example, if `textposition` is set to *top right* and',\n                    '`yanchor` to *top* then the top-most portion of the',\n                    'label text lines up with the top-most edge of the',\n                    'new shape.',\n                ].join(' ')\n            },\n            padding: {\n                valType: 'number',\n                dflt: 3,\n                min: 0,\n                editType: 'none',\n                description: 'Sets padding (in px) between edge of label and edge of new shape.'\n            },\n            editType: 'none'\n        },\n        editType: 'none'\n    },\n\n    activeshape: {\n        fillcolor: {\n            valType: 'color',\n            dflt: 'rgb(255,0,255)',\n            editType: 'none',\n            description: 'Sets the color filling the active shape\\' interior.'\n        },\n        opacity: {\n            valType: 'number',\n            min: 0,\n            max: 1,\n            dflt: 0.5,\n            editType: 'none',\n            description: 'Sets the opacity of the active shape.'\n        },\n        editType: 'none'\n    }\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,SAAS,GAAGC,OAAO,CAAC,gCAAgC,CAAC;AACzD,IAAIC,IAAI,GAAGD,OAAO,CAAC,0BAA0B,CAAC,CAACC,IAAI;AACnD,IAAIC,UAAU,GAAGF,OAAO,CAAC,qBAAqB,CAAC,CAACE,UAAU;AAE1DC,MAAM,CAACC,OAAO,GAAG;EACbC,QAAQ,EAAE;IACNC,IAAI,EAAE;MACFC,KAAK,EAAE;QACHC,OAAO,EAAE,OAAO;QAChBC,QAAQ,EAAE,MAAM;QAChBC,WAAW,EAAE,CACT,sBAAsB,EACtB,2CAA2C,EAC3C,6CAA6C,CAChD,CAACC,IAAI,CAAC,GAAG;MACd,CAAC;MACDC,KAAK,EAAE;QACHJ,OAAO,EAAE,QAAQ;QACjBK,GAAG,EAAE,CAAC;QACNC,IAAI,EAAE,CAAC;QACPL,QAAQ,EAAE,MAAM;QAChBC,WAAW,EAAE;MACjB,CAAC;MACDT,IAAI,EAAEC,UAAU,CAAC,CAAC,CAAC,EAAED,IAAI,EAAE;QACvBa,IAAI,EAAE,OAAO;QACbL,QAAQ,EAAE;MACd,CAAC,CAAC;MACFA,QAAQ,EAAE;IACd,CAAC;IACDM,SAAS,EAAE;MACPP,OAAO,EAAE,OAAO;MAChBM,IAAI,EAAE,eAAe;MACrBL,QAAQ,EAAE,MAAM;MAChBC,WAAW,EAAE,CACT,+CAA+C,EAC/C,qEAAqE,EACrE,kEAAkE,EAClE,8CAA8C,CACjD,CAACC,IAAI,CAAC,GAAG;IACd,CAAC;IACDK,QAAQ,EAAE;MACNR,OAAO,EAAE,YAAY;MACrBS,MAAM,EAAE,CAAC,SAAS,EAAE,SAAS,CAAC;MAC9BH,IAAI,EAAE,SAAS;MACfL,QAAQ,EAAE,MAAM;MAChBC,WAAW,EAAE,CACT,kCAAkC,EAClC,iGAAiG,CACpG,CAACC,IAAI,CAAC,GAAG;IACd,CAAC;IACDO,OAAO,EAAE;MACLV,OAAO,EAAE,QAAQ;MACjBK,GAAG,EAAE,CAAC;MACNM,GAAG,EAAE,CAAC;MACNL,IAAI,EAAE,CAAC;MACPL,QAAQ,EAAE,MAAM;MAChBC,WAAW,EAAE;IACjB,CAAC;IACDU,KAAK,EAAE;MACHZ,OAAO,EAAE,YAAY;MACrBS,MAAM,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC;MAC1BH,IAAI,EAAE,OAAO;MACbL,QAAQ,EAAE,MAAM;MAChBC,WAAW,EAAE;IACjB,CAAC;IACDW,aAAa,EAAE;MACXb,OAAO,EAAE,YAAY;MACrBS,MAAM,EAAE,CAAC,OAAO,EAAE,YAAY,EAAE,UAAU,EAAE,UAAU,CAAC;MACvDH,IAAI,EAAE,UAAU;MAChBL,QAAQ,EAAE,MAAM;MAChBC,WAAW,EAAE,CACT,kEAAkE,EAClE,8DAA8D,EAC9D,4EAA4E,EAC5E,8DAA8D,EAC9D,wCAAwC,EACxC,oCAAoC,CACvC,CAACC,IAAI,CAAC,GAAG;IACd,CAAC;IACDW,KAAK,EAAE;MACHC,IAAI,EAAE;QACFf,OAAO,EAAE,QAAQ;QACjBM,IAAI,EAAE,EAAE;QACRL,QAAQ,EAAE,MAAM;QAChBC,WAAW,EAAE;MACjB,CAAC;MACDc,IAAI,EAAEzB,SAAS,CAAC;QACZU,QAAQ,EAAE,MAAM;QAChBC,WAAW,EAAE;MACjB,CAAC,CAAC;MACFe,YAAY,EAAE;QACVjB,OAAO,EAAE,YAAY;QACrBS,MAAM,EAAE,CACJ,UAAU,EAAE,YAAY,EAAE,WAAW,EACrC,aAAa,EAAE,eAAe,EAAE,cAAc,EAC9C,aAAa,EAAE,eAAe,EAAE,cAAc,EAC9C,OAAO,EAAE,QAAQ,EAAE,KAAK,CAC3B;QACDR,QAAQ,EAAE,MAAM;QAChBC,WAAW,EAAE,CACT,gEAAgE,EAChE,wDAAwD,EACxD,uDAAuD,EACvD,kEAAkE,EAClE,qBAAqB,EACrB,8DAA8D,EAC9D,kFAAkF,CACrF,CAACC,IAAI,CAAC,GAAG;MACd,CAAC;MACDe,SAAS,EAAE;QACPlB,OAAO,EAAE,OAAO;QAChBM,IAAI,EAAE,MAAM;QACZL,QAAQ,EAAE,MAAM;QAChBC,WAAW,EAAE,CACT,iDAAiD,EACjD,yDAAyD,EACzD,sDAAsD,EACtD,6BAA6B,CAChC,CAACC,IAAI,CAAC,GAAG;MACd,CAAC;MACDgB,OAAO,EAAE;QACLnB,OAAO,EAAE,YAAY;QACrBS,MAAM,EAAE,CAAC,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,CAAC;QAC3CH,IAAI,EAAE,MAAM;QACZL,QAAQ,EAAE,MAAM;QAChBC,WAAW,EAAE,CACT,8CAA8C,EAC9C,wEAAwE,EACxE,+BAA+B,EAC/B,0DAA0D,EAC1D,yDAAyD,EACzD,qDAAqD,EACrD,YAAY,CACf,CAACC,IAAI,CAAC,GAAG;MACd,CAAC;MACDiB,OAAO,EAAE;QACLpB,OAAO,EAAE,YAAY;QACrBS,MAAM,EAAE,CAAC,KAAK,EAAE,QAAQ,EAAE,QAAQ,CAAC;QACnCR,QAAQ,EAAE,MAAM;QAChBC,WAAW,EAAE,CACT,4CAA4C,EAC5C,uEAAuE,EACvE,gCAAgC,EAChC,0DAA0D,EAC1D,qDAAqD,EACrD,mDAAmD,EACnD,YAAY,CACf,CAACC,IAAI,CAAC,GAAG;MACd,CAAC;MACDkB,OAAO,EAAE;QACLrB,OAAO,EAAE,QAAQ;QACjBM,IAAI,EAAE,CAAC;QACPD,GAAG,EAAE,CAAC;QACNJ,QAAQ,EAAE,MAAM;QAChBC,WAAW,EAAE;MACjB,CAAC;MACDD,QAAQ,EAAE;IACd,CAAC;IACDA,QAAQ,EAAE;EACd,CAAC;EAEDqB,WAAW,EAAE;IACTf,SAAS,EAAE;MACPP,OAAO,EAAE,OAAO;MAChBM,IAAI,EAAE,gBAAgB;MACtBL,QAAQ,EAAE,MAAM;MAChBC,WAAW,EAAE;IACjB,CAAC;IACDQ,OAAO,EAAE;MACLV,OAAO,EAAE,QAAQ;MACjBK,GAAG,EAAE,CAAC;MACNM,GAAG,EAAE,CAAC;MACNL,IAAI,EAAE,GAAG;MACTL,QAAQ,EAAE,MAAM;MAChBC,WAAW,EAAE;IACjB,CAAC;IACDD,QAAQ,EAAE;EACd;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}