{"ast":null,"code":"'use strict';\n\nvar dragHelpers = require('../../dragelement/helpers');\nvar drawMode = dragHelpers.drawMode;\nvar openMode = dragHelpers.openMode;\nvar constants = require('./constants');\nvar i000 = constants.i000;\nvar i090 = constants.i090;\nvar i180 = constants.i180;\nvar i270 = constants.i270;\nvar cos45 = constants.cos45;\nvar sin45 = constants.sin45;\nvar cartesianHelpers = require('../../selections/helpers');\nvar p2r = cartesianHelpers.p2r;\nvar r2p = cartesianHelpers.r2p;\nvar handleOutline = require('.././handle_outline');\nvar clearOutline = handleOutline.clearOutline;\nvar helpers = require('./helpers');\nvar readPaths = helpers.readPaths;\nvar writePaths = helpers.writePaths;\nvar ellipseOver = helpers.ellipseOver;\nvar fixDatesForPaths = helpers.fixDatesForPaths;\nmodule.exports = function newShapes(outlines, dragOptions) {\n  if (!outlines.length) return;\n  var e = outlines[0][0]; // pick first\n  if (!e) return;\n  var d = e.getAttribute('d');\n  var gd = dragOptions.gd;\n  var newStyle = gd._fullLayout.newshape;\n  var plotinfo = dragOptions.plotinfo;\n  var xaxis = plotinfo.xaxis;\n  var yaxis = plotinfo.yaxis;\n  var xPaper = !!plotinfo.domain || !plotinfo.xaxis;\n  var yPaper = !!plotinfo.domain || !plotinfo.yaxis;\n  var isActiveShape = dragOptions.isActiveShape;\n  var dragmode = dragOptions.dragmode;\n  var shapes = (gd.layout || {}).shapes || [];\n  if (!drawMode(dragmode) && isActiveShape !== undefined) {\n    var id = gd._fullLayout._activeShapeIndex;\n    if (id < shapes.length) {\n      switch (gd._fullLayout.shapes[id].type) {\n        case 'rect':\n          dragmode = 'drawrect';\n          break;\n        case 'circle':\n          dragmode = 'drawcircle';\n          break;\n        case 'line':\n          dragmode = 'drawline';\n          break;\n        case 'path':\n          var path = shapes[id].path || '';\n          if (path[path.length - 1] === 'Z') {\n            dragmode = 'drawclosedpath';\n          } else {\n            dragmode = 'drawopenpath';\n          }\n          break;\n      }\n    }\n  }\n  var isOpenMode = openMode(dragmode);\n  var polygons = readPaths(d, gd, plotinfo, isActiveShape);\n  var newShape = {\n    editable: true,\n    label: newStyle.label,\n    xref: xPaper ? 'paper' : xaxis._id,\n    yref: yPaper ? 'paper' : yaxis._id,\n    layer: newStyle.layer,\n    opacity: newStyle.opacity,\n    line: {\n      color: newStyle.line.color,\n      width: newStyle.line.width,\n      dash: newStyle.line.dash\n    }\n  };\n  if (!isOpenMode) {\n    newShape.fillcolor = newStyle.fillcolor;\n    newShape.fillrule = newStyle.fillrule;\n  }\n  var cell;\n  // line, rect and circle can be in one cell\n  // only define cell if there is single cell\n  if (polygons.length === 1) cell = polygons[0];\n  if (cell && cell.length === 5 &&\n  // ensure we only have 4 corners for a rect\n  dragmode === 'drawrect') {\n    newShape.type = 'rect';\n    newShape.x0 = cell[0][1];\n    newShape.y0 = cell[0][2];\n    newShape.x1 = cell[2][1];\n    newShape.y1 = cell[2][2];\n  } else if (cell && dragmode === 'drawline') {\n    newShape.type = 'line';\n    newShape.x0 = cell[0][1];\n    newShape.y0 = cell[0][2];\n    newShape.x1 = cell[1][1];\n    newShape.y1 = cell[1][2];\n  } else if (cell && dragmode === 'drawcircle') {\n    newShape.type = 'circle'; // an ellipse!\n\n    var xA = cell[i000][1];\n    var xB = cell[i090][1];\n    var xC = cell[i180][1];\n    var xD = cell[i270][1];\n    var yA = cell[i000][2];\n    var yB = cell[i090][2];\n    var yC = cell[i180][2];\n    var yD = cell[i270][2];\n    var xDateOrLog = plotinfo.xaxis && (plotinfo.xaxis.type === 'date' || plotinfo.xaxis.type === 'log');\n    var yDateOrLog = plotinfo.yaxis && (plotinfo.yaxis.type === 'date' || plotinfo.yaxis.type === 'log');\n    if (xDateOrLog) {\n      xA = r2p(plotinfo.xaxis, xA);\n      xB = r2p(plotinfo.xaxis, xB);\n      xC = r2p(plotinfo.xaxis, xC);\n      xD = r2p(plotinfo.xaxis, xD);\n    }\n    if (yDateOrLog) {\n      yA = r2p(plotinfo.yaxis, yA);\n      yB = r2p(plotinfo.yaxis, yB);\n      yC = r2p(plotinfo.yaxis, yC);\n      yD = r2p(plotinfo.yaxis, yD);\n    }\n    var x0 = (xB + xD) / 2;\n    var y0 = (yA + yC) / 2;\n    var rx = (xD - xB + xC - xA) / 2;\n    var ry = (yD - yB + yC - yA) / 2;\n    var pos = ellipseOver({\n      x0: x0,\n      y0: y0,\n      x1: x0 + rx * cos45,\n      y1: y0 + ry * sin45\n    });\n    if (xDateOrLog) {\n      pos.x0 = p2r(plotinfo.xaxis, pos.x0);\n      pos.x1 = p2r(plotinfo.xaxis, pos.x1);\n    }\n    if (yDateOrLog) {\n      pos.y0 = p2r(plotinfo.yaxis, pos.y0);\n      pos.y1 = p2r(plotinfo.yaxis, pos.y1);\n    }\n    newShape.x0 = pos.x0;\n    newShape.y0 = pos.y0;\n    newShape.x1 = pos.x1;\n    newShape.y1 = pos.y1;\n  } else {\n    newShape.type = 'path';\n    if (xaxis && yaxis) fixDatesForPaths(polygons, xaxis, yaxis);\n    newShape.path = writePaths(polygons);\n    cell = null;\n  }\n  clearOutline(gd);\n  var editHelpers = dragOptions.editHelpers;\n  var modifyItem = (editHelpers || {}).modifyItem;\n  var allShapes = [];\n  for (var q = 0; q < shapes.length; q++) {\n    var beforeEdit = gd._fullLayout.shapes[q];\n    allShapes[q] = beforeEdit._input;\n    if (isActiveShape !== undefined && q === gd._fullLayout._activeShapeIndex) {\n      var afterEdit = newShape;\n      switch (beforeEdit.type) {\n        case 'line':\n        case 'rect':\n        case 'circle':\n          modifyItem('x0', afterEdit.x0);\n          modifyItem('x1', afterEdit.x1);\n          modifyItem('y0', afterEdit.y0);\n          modifyItem('y1', afterEdit.y1);\n          break;\n        case 'path':\n          modifyItem('path', afterEdit.path);\n          break;\n      }\n    }\n  }\n  if (isActiveShape === undefined) {\n    allShapes.push(newShape); // add new shape\n    return allShapes;\n  }\n  return editHelpers ? editHelpers.getUpdateObj() : {};\n};","map":{"version":3,"names":["dragHelpers","require","drawMode","openMode","constants","i000","i090","i180","i270","cos45","sin45","cartesianHelpers","p2r","r2p","handleOutline","clearOutline","helpers","readPaths","writePaths","ellipseOver","fixDatesForPaths","module","exports","newShapes","outlines","dragOptions","length","e","d","getAttribute","gd","newStyle","_fullLayout","newshape","plotinfo","xaxis","yaxis","xPaper","domain","yPaper","isActiveShape","dragmode","shapes","layout","undefined","id","_activeShapeIndex","type","path","isOpenMode","polygons","newShape","editable","label","xref","_id","yref","layer","opacity","line","color","width","dash","fillcolor","fillrule","cell","x0","y0","x1","y1","xA","xB","xC","xD","yA","yB","yC","yD","xDateOrLog","yDateOrLog","rx","ry","pos","editHelpers","modifyItem","allShapes","q","beforeEdit","_input","afterEdit","push","getUpdateObj"],"sources":["/Users/lordvoldemort/django_react/second_attempt/frontend/bull_bear/node_modules/plotly.js/src/components/shapes/draw_newshape/newshapes.js"],"sourcesContent":["'use strict';\n\nvar dragHelpers = require('../../dragelement/helpers');\nvar drawMode = dragHelpers.drawMode;\nvar openMode = dragHelpers.openMode;\n\nvar constants = require('./constants');\nvar i000 = constants.i000;\nvar i090 = constants.i090;\nvar i180 = constants.i180;\nvar i270 = constants.i270;\nvar cos45 = constants.cos45;\nvar sin45 = constants.sin45;\n\nvar cartesianHelpers = require('../../selections/helpers');\nvar p2r = cartesianHelpers.p2r;\nvar r2p = cartesianHelpers.r2p;\n\nvar handleOutline = require('.././handle_outline');\nvar clearOutline = handleOutline.clearOutline;\n\nvar helpers = require('./helpers');\nvar readPaths = helpers.readPaths;\nvar writePaths = helpers.writePaths;\nvar ellipseOver = helpers.ellipseOver;\nvar fixDatesForPaths = helpers.fixDatesForPaths;\n\nmodule.exports = function newShapes(outlines, dragOptions) {\n    if(!outlines.length) return;\n    var e = outlines[0][0]; // pick first\n    if(!e) return;\n    var d = e.getAttribute('d');\n\n    var gd = dragOptions.gd;\n    var newStyle = gd._fullLayout.newshape;\n\n    var plotinfo = dragOptions.plotinfo;\n    var xaxis = plotinfo.xaxis;\n    var yaxis = plotinfo.yaxis;\n    var xPaper = !!plotinfo.domain || !plotinfo.xaxis;\n    var yPaper = !!plotinfo.domain || !plotinfo.yaxis;\n\n    var isActiveShape = dragOptions.isActiveShape;\n    var dragmode = dragOptions.dragmode;\n\n    var shapes = (gd.layout || {}).shapes || [];\n\n    if(!drawMode(dragmode) && isActiveShape !== undefined) {\n        var id = gd._fullLayout._activeShapeIndex;\n        if(id < shapes.length) {\n            switch(gd._fullLayout.shapes[id].type) {\n                case 'rect':\n                    dragmode = 'drawrect';\n                    break;\n                case 'circle':\n                    dragmode = 'drawcircle';\n                    break;\n                case 'line':\n                    dragmode = 'drawline';\n                    break;\n                case 'path':\n                    var path = shapes[id].path || '';\n                    if(path[path.length - 1] === 'Z') {\n                        dragmode = 'drawclosedpath';\n                    } else {\n                        dragmode = 'drawopenpath';\n                    }\n                    break;\n            }\n        }\n    }\n\n    var isOpenMode = openMode(dragmode);\n\n    var polygons = readPaths(d, gd, plotinfo, isActiveShape);\n\n    var newShape = {\n        editable: true,\n\n        label: newStyle.label,\n\n        xref: xPaper ? 'paper' : xaxis._id,\n        yref: yPaper ? 'paper' : yaxis._id,\n\n        layer: newStyle.layer,\n        opacity: newStyle.opacity,\n        line: {\n            color: newStyle.line.color,\n            width: newStyle.line.width,\n            dash: newStyle.line.dash\n        }\n    };\n\n    if(!isOpenMode) {\n        newShape.fillcolor = newStyle.fillcolor;\n        newShape.fillrule = newStyle.fillrule;\n    }\n\n    var cell;\n    // line, rect and circle can be in one cell\n    // only define cell if there is single cell\n    if(polygons.length === 1) cell = polygons[0];\n\n    if(\n        cell &&\n        cell.length === 5 && // ensure we only have 4 corners for a rect\n        dragmode === 'drawrect'\n    ) {\n        newShape.type = 'rect';\n        newShape.x0 = cell[0][1];\n        newShape.y0 = cell[0][2];\n        newShape.x1 = cell[2][1];\n        newShape.y1 = cell[2][2];\n    } else if(\n        cell &&\n        dragmode === 'drawline'\n    ) {\n        newShape.type = 'line';\n        newShape.x0 = cell[0][1];\n        newShape.y0 = cell[0][2];\n        newShape.x1 = cell[1][1];\n        newShape.y1 = cell[1][2];\n    } else if(\n        cell &&\n        dragmode === 'drawcircle'\n    ) {\n        newShape.type = 'circle'; // an ellipse!\n\n        var xA = cell[i000][1];\n        var xB = cell[i090][1];\n        var xC = cell[i180][1];\n        var xD = cell[i270][1];\n\n        var yA = cell[i000][2];\n        var yB = cell[i090][2];\n        var yC = cell[i180][2];\n        var yD = cell[i270][2];\n\n        var xDateOrLog = plotinfo.xaxis && (\n            plotinfo.xaxis.type === 'date' ||\n            plotinfo.xaxis.type === 'log'\n        );\n\n        var yDateOrLog = plotinfo.yaxis && (\n            plotinfo.yaxis.type === 'date' ||\n            plotinfo.yaxis.type === 'log'\n        );\n\n        if(xDateOrLog) {\n            xA = r2p(plotinfo.xaxis, xA);\n            xB = r2p(plotinfo.xaxis, xB);\n            xC = r2p(plotinfo.xaxis, xC);\n            xD = r2p(plotinfo.xaxis, xD);\n        }\n\n        if(yDateOrLog) {\n            yA = r2p(plotinfo.yaxis, yA);\n            yB = r2p(plotinfo.yaxis, yB);\n            yC = r2p(plotinfo.yaxis, yC);\n            yD = r2p(plotinfo.yaxis, yD);\n        }\n\n        var x0 = (xB + xD) / 2;\n        var y0 = (yA + yC) / 2;\n        var rx = (xD - xB + xC - xA) / 2;\n        var ry = (yD - yB + yC - yA) / 2;\n        var pos = ellipseOver({\n            x0: x0,\n            y0: y0,\n            x1: x0 + rx * cos45,\n            y1: y0 + ry * sin45\n        });\n\n        if(xDateOrLog) {\n            pos.x0 = p2r(plotinfo.xaxis, pos.x0);\n            pos.x1 = p2r(plotinfo.xaxis, pos.x1);\n        }\n\n        if(yDateOrLog) {\n            pos.y0 = p2r(plotinfo.yaxis, pos.y0);\n            pos.y1 = p2r(plotinfo.yaxis, pos.y1);\n        }\n\n        newShape.x0 = pos.x0;\n        newShape.y0 = pos.y0;\n        newShape.x1 = pos.x1;\n        newShape.y1 = pos.y1;\n    } else {\n        newShape.type = 'path';\n        if(xaxis && yaxis) fixDatesForPaths(polygons, xaxis, yaxis);\n        newShape.path = writePaths(polygons);\n        cell = null;\n    }\n\n    clearOutline(gd);\n\n    var editHelpers = dragOptions.editHelpers;\n    var modifyItem = (editHelpers || {}).modifyItem;\n\n    var allShapes = [];\n    for(var q = 0; q < shapes.length; q++) {\n        var beforeEdit = gd._fullLayout.shapes[q];\n        allShapes[q] = beforeEdit._input;\n\n        if(\n            isActiveShape !== undefined &&\n            q === gd._fullLayout._activeShapeIndex\n        ) {\n            var afterEdit = newShape;\n\n            switch(beforeEdit.type) {\n                case 'line':\n                case 'rect':\n                case 'circle':\n                    modifyItem('x0', afterEdit.x0);\n                    modifyItem('x1', afterEdit.x1);\n                    modifyItem('y0', afterEdit.y0);\n                    modifyItem('y1', afterEdit.y1);\n                    break;\n\n                case 'path':\n                    modifyItem('path', afterEdit.path);\n                    break;\n            }\n        }\n    }\n\n    if(isActiveShape === undefined) {\n        allShapes.push(newShape); // add new shape\n        return allShapes;\n    }\n\n    return editHelpers ? editHelpers.getUpdateObj() : {};\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}